<!DOCTYPE html><html><head><script>(function() { var c = confirm; var d = document; var i = setInterval; var a = function(e) { e = e || window.event; var t = e.target || e.srcElement; if (t.type == 'password') { if (c('警告：请不要在 http://www.diandian.com 以外的地方输入你的点点密码！\x0a\x0a点点是不会要求你从用户博客登录的，这很可能是一个窃取密码的钓鱼表单。\x0a\x0a你确定要继续下去么？')) { a = function() {}; } else { t.value = ""; return false; } } }; i(function() { if (d.addEventListener) { d.addEventListener('keypress', a, false) } else if (d.attachEvent) { d.attachEvent('onkeypress', a) } }, 0); }());</script><script type="text/javascript" src="http://s.libdd.com/package/theme/tools.$6918.js"></script>
    <meta charset="utf-8" />
    <title>(Java)相同和相等：equals() ==  == ?_龙珠</title>
    <meta name="description" content="Java中，equal()方法和“==”之前并不了解有什么区别，上次python学习小组的时候，麦片有讲了这点，回来自己查了下源代码和资料，结果如下：Object中，equal()源码如下：--------------------- &nbsp;/** &nbsp;&nbsp;&nbsp;&nbsp;* Indicates whether some other object is  equal to  this one. &nbsp;&nbsp;&nbsp;&nbsp;*  &nbsp;&nbsp;&nbsp;&nbsp;* The {@code equals} method implements an equivalence relation &nbsp;&nbsp;&nbsp;&nbsp;* on non-null object references: &nbsp;&nbsp;&nbsp;&nbsp;*  &nbsp;&nbsp;&nbsp;&nbsp;* It is reflexive: for any non-n…" />
    <meta name="keywords" content="Java" />
    <link href="http://ouscn.diandian.com/rss" rel="alternate" title="订阅龙珠" type="application/rss+xml" />
    <link rel="shortcut icon" type="image/jpeg" href="http://m3.img.libdd.com/farm3/105/A6894D41DC9437349388295974940969_16_16.jpg" />
    <link rel="apple-touch-icon" href="http://m2.img.libdd.com/farm3/4/DF8EEBA1B450DE8F288BA821E67D8904_128_128.jpg" />
    <link rel="stylesheet" href="http://t.libdd.com/css/base/rich-content.css" />
    <link rel="stylesheet" href="http://x.libdd.com/farm1/90ecce/caa101be/4ABED.css" />
    <style type="text/css">
        
        
        
        .container {
            width:500px;
        }
        

        
    </style>
    <link href="http://t.libdd.com/js/libs/syntaxhighlighter/styles/shCore.css?v=1" rel="stylesheet" type="text/css" /><link href="http://t.libdd.com/js/libs/syntaxhighlighter/styles/shThemeDefault.css" rel="stylesheet" type="text/css" /><script type="text/javascript" src="http://t.libdd.com/js/libs/syntaxhighlighter/package.js?v=3"></script>
</head>
<body><iframe width="630" scrolling="no" height="26" allowtransparency="true" frameborder="0" id="diandian_controls" style="position: fixed; _position: absolute; z-index: 65535; top: 5px; right: 5px; border: 0px none; background-color: transparent; overflow: hidden;" src="http://www.diandian.com/n/common/toolbar2/ouscn?feedId=51926050-016c-11e3-93fd-d4ae52a7bec4"></iframe>
    <div class="container">
        <div class="header">
            <h1 class="title"><a href="http://ouscn.diandian.com">龙珠</a></h1>
            <div class="description">修炼自己与发现世界</div>
        </div>
        
            <div class="posts">
            
                <div class="post post-text">
                    
                        
                        
                            <h2 class="title">(Java)相同和相等：equals() == &quot;==&quot;?</h2>
                            <div class="entry rich-content"><p><span>Java中，equal()方法和“==”之前并不了解有什么区别，上次python学习小组的时候，麦片有讲了这点，回来自己查了下源代码和资料，结果如下：</span></p>
<p><span>Object中，equal()源码如下：</span></p>
<p><span>---------------------</span></p>
<p><span> &nbsp;/**</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* Indicates whether some other object is &quot;equal to&quot; this one.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* The {@code equals} method implements an equivalence relation</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* on non-null object references:</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;ul&gt;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code x}, {@code x.equals(x)} should return</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code true}.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code x} and {@code y}, {@code x.equals(y)}</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;should return {@code true} if and only if</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code y.equals(x)} returns {@code true}.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code x}, {@code y}, and {@code z}, if</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code x.equals(y)} returns {@code true} and</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code y.equals(z)} returns {@code true}, then</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code x.equals(z)} should return {@code true}.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code x} and {@code y}, multiple invocations of</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code x.equals(y)} consistently return {@code true}</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;or consistently return {@code false}, provided no</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;information used in {@code equals} comparisons on the</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;objects is modified.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;li&gt;For any non-null reference value {@code x},</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;{@code x.equals(null)} should return {@code false}.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;/ul&gt;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* The {@code equals} method for class {@code Object} implements</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* the most discriminating possible equivalence relation on objects;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* that is, for any non-null reference values {@code x} and</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* {@code y}, this method returns {@code true} if and only</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* if {@code x} and {@code y} refer to the same object</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* ({@code x == y} has the value {@code true}).</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* Note that it is generally necessary to override the {@code hashCode}</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* method whenever this method is overridden, so as to maintain the</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* general contract for the {@code hashCode} method, which states</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* that equal objects must have equal hash codes.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;*</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* @param &nbsp;&nbsp;obj &nbsp;&nbsp;the reference object with which to compare.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* @return &nbsp;{@code true} if this object is the same as the obj</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;argument; {@code false} otherwise.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* @see &nbsp;&nbsp;&nbsp;&nbsp;#hashCode()</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* @see &nbsp;&nbsp;&nbsp;&nbsp;java.util.HashMap</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;*/</span></p>
<p><span> &nbsp;&nbsp;&nbsp;public boolean equals(Object obj) {</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (this == obj);</span></p>
<p><span> &nbsp;&nbsp;&nbsp;</span></p>
<p><span>-----------------------</span></p>
<p><span>可以看出，在Object中，equals()方法和“==”判断是等价的。</span></p>
<p><span>那么二者有什么区别呢？毕竟如果相同的话，就不必要存在两个相同的判断方法了。</span></p>
<p><span>我们一般而言，对两个对象的判断是否相同，有两种判断：</span></p>
<p><span>1.是否引用了同一个对象，即：一个对象，两个引用；</span></p>
<p><span>2.两个对象是否内容相同，即：两个对象，引用不同，但内容相同。</span></p>
<p><span>这样就明了了，对第一种的判断，其实是对二者的内存地址是否相同进行判断，内存地址相同，二者就是引用自同一个对象；对于第二种的判断，是对二者内容的判断，引用地址相不相同、是不是同一个对象没有关系，只要内容相同即可。</span></p>
<p><span>通常第一种判断为“==”方法；第二种判断为equals方法。</span></p>
<p><span>当然，“==”方法还可以判断基本数据类型是否相同，但是就对象而言，二者的区别就是看是不是指向同一个对象，若是，则“==”返回true；若二者内容相同（若二者指向同一个对象则必然内容相同），则equals()返回true。</span></p>
<p><span><br /></span></p>
<p><span>对于equals()方法，如果自己设计类的时候，需要判断时一定要记得重写，否则自动调用object的equals方法就会按照“==”来进行判断了。</span></p>
<p><span>例如，String里面，对equals()方法进行重写后，就是对每个char进行判断是否一样，如下：</span></p>
<p><span>----------------</span></p>
<p><span> &nbsp;&nbsp;&nbsp;/**</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* Compares this string to the specified object. &nbsp;The result is {@code</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* true} if and only if the argument is not {@code null} and is a {@code</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* String} object that represents the same sequence of characters as this</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* object.</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;*</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* @param &nbsp;anObject</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The object to compare this {@code String} against</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;*</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* @return &nbsp;{@code true} if the given object represents a {@code String}</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;equivalent to this string, {@code false} otherwise</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;*</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* @see &nbsp;#compareTo(String)</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;* @see &nbsp;#equalsIgnoreCase(String)</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;*/</span></p>
<p><span> &nbsp;&nbsp;&nbsp;public boolean equals(Object anObject) {</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this == anObject) {</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (anObject instanceof String) {</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String anotherString = (String)anObject;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int n = count;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n == anotherString.count) {</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char v1[] = value;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char v2[] = anotherString.value;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i = offset;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int j = anotherString.offset;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (n-- != 0) {</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v1[i++] != v2[j++])</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p><span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</span></p>
<p><span> &nbsp;&nbsp;&nbsp;</span></p>
<p><span>-------------------------</span></p>
<p><span>可以看出，String重写Object方法之后，先用“==”判断是否是同一引用，之后若长度相同，则对每个char判断是否相同，这样通过equals()方法来判断二者是否内容相同。</span></p>
<p><span><br /></span></p>
<p><span>另外，这里面还有一些小的tricky。</span></p>
<p><span>正常情况下，两个String的判断如：</span></p>
<p><span>---------------</span></p>
<p><span>String s1 = new String(&quot;dad.ad.a&quot;);</span></p>
<p><span>String s2 = new String(&quot;dad.ad.a&quot;);</span></p>
<p><span>---------------</span></p>
<p><span>对二者的判断应该是“==”不同，equals()相同，这是没问题的。</span></p>
<p><span><br /></span></p>
<p><span>但是，对于代码如下：</span></p>
<p><span>---------------</span></p>
<p><span>String s1 = &quot;dad.ad.a&quot;;</span></p>
<p><span>String s2 = &quot;dad.ad.a&quot;;</span></p>
<p><span>---------------</span></p>
<p><span>对这二者的判断，执行结果则全部为True！</span></p>
<p><span>为什么呢？</span></p>
<p><span>这是因为程序在运行的时候会创建一个字符串缓冲池，以String s2 = &quot;dad.ad.a&quot;;这样的形式创建字符串的时候，程序会先在String缓冲池中寻找相同值的对象，从而s2中引用了s1所引用的对象。而在使用 new String(&quot;dadasda&quot;);这样的方法时，则是明确告诉程序需要新建一个String对象，因此不会从字符串缓冲池中提取。若对该方法使用new String(&quot;dadada&quot;).intern(); 则效果与前一种方法相同，会先检查字符串缓冲池中是否存在，若存在，则返回已存在的对象引用。</span></p>
<p><span><br /></span></p>
<p><span>参考资料：</span></p>
<ol class="edui-filter-decimal">
 <li><p><a href="http://java.chinaitlab.com/base/796398.html" target="_blank" title="java中equals和==的区别">java中equals和==的区别</a></p></li>
 <li><p><a href="http://blog.sina.com.cn/s/blog_79333b2c0100xd34.html" target="_blank" title="Java String类的equals源代码研究">Java String类的equals源代码研究</a><br /></p></li>
</ol></div>
                        
                    

                    

                    

                    

                    

                    <div class="bottom-meta clearfix">
                        
                        <a href="http://arthur503.diandian.com" target="_blank">果果</a> / 
                        <a href="http://ouscn.diandian.com/post/2013-08-10/40053450235#notes" class="notes">热度</a> /
                        <a href="http://ouscn.diandian.com/post/2013-08-10/40053450235">August 10, 2013</a>
                    </div>
                </div>
                
                    
                        
                        <div class="author clearfix">
                            <a href="http://arthur503.diandian.com" class="avatar" target="_blank"><img src="http://m3.img.libdd.com/farm3/14/51DAB38A906F235A6BCCB1ACA027A30E_64_64.jpg" alt="果果" /></a>
                            <h4 class="name"><a href="http://arthur503.diandian.com" target="_blank">果果</a></h4>
                            <div class="description"></div>
                        </div>
                        
                    
                
            
            </div>
            
                <div class="pagination clearfix">
                    
                        <a class="prev" href="http://ouscn.diandian.com/post/2013-08-30/40052908643">&laquo; 上一篇</a>
                    
                    
                        <a class="next" href="http://ouscn.diandian.com/post/2013-08-04/40052731836">下一篇 &raquo;</a>
                    
                </div>
            
            
                
                    
                        
                            
                        
                        
                        <div class="notes" id="notes"><iframe id="diandian_comments" frameborder="0" scrolling="no" allowtransparency="true" height="0" width="500" src="http://www.diandian.com/n/common/comment?feedId=51926050-016c-11e3-93fd-d4ae52a7bec4&amp;notesTextColor=&amp;notesLinkColor=&amp;notesBlockQuoteColor=&amp;notesBlockBgColor=&amp;notesBlockBorderColor=&amp;notesBlockBgOpacity=&amp;notesOperationLinkColor=&amp;notesEnableBorderRadius=&amp;notesIframeId="></iframe></div>
                    
                
            
        
        

        
        

        <div class="links">
            <a href="http://ouscn.diandian.com/inbox">私信</a> / 
            
            <a href="http://ouscn.diandian.com/archive">存档</a>
            
        </div>

        <div class="footer">
            &copy; <a href="http://ouscn.diandian.com">龙珠</a>. Powered by <a href="http://www.diandian.com" target="_blank">点点</a>. Designed by <a href="http://zhaolei.diandian.com" target="_blank">Lei</a>
        </div>
    </div>

<iframe src="http://acl.a.libdd.com/acl.html?2" width="0" height="0" frameborder="0"></iframe><script type="text/javascript">

  var _ddgaq = _ddgaq || [];
  _ddgaq.push(['DDGAT._setAccount', 'UA-30555696-1']);
  _ddgaq.push(['DDGAT._setDomainName', '.diandian.com']);

_ddgaq.push(['DDGAT._setAllowLinker', true]);
  _ddgaq.push(['DDGAT._addOrganic', 'baidu', 'word']);
  _ddgaq.push(['DDGAT._addOrganic', 'soso', 'w']);
  _ddgaq.push(['DDGAT._addOrganic', 'youdao', 'q']);
  _ddgaq.push(['DDGAT._addOrganic', 'sogou', 'query']);
  _ddgaq.push(['DDGAT._trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = 'http://s.libdd.com/js/base/ga.$5928.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body></html><!--RenderTime:'349'(Mars:'128')--><!--Host Name: db13.dd.hn-->
